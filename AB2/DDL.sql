/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 12.0 		*/
/*  Created On : 29-okt-2015 15:24:22 				*/
/*  DBMS       : PostgreSQL 						*/
/* ---------------------------------------------------- */

/* SISUKORD, MUUTJA SALVESTAMINE, RAKENDUS */

/* Drop Views */

DROP VIEW IF EXISTS Detailaruanne
;

DROP VIEW IF EXISTS Loplikult_muugist_eemaldamine
;

DROP VIEW IF EXISTS Keskmine_hind
;

DROP VIEW IF EXISTS Kauba_detailvaade
;


/* Drop Tables */

DROP TABLE IF EXISTS Tootaja_seisundi_liik CASCADE
;

DROP TABLE IF EXISTS Tootaja CASCADE
;

DROP TABLE IF EXISTS Tarnija CASCADE
;

DROP TABLE IF EXISTS Osapoole_seisundi_liik CASCADE
;

DROP TABLE IF EXISTS Osapool_isik CASCADE
;

DROP TABLE IF EXISTS Osapool CASCADE
;

DROP TABLE IF EXISTS Organisatsioon CASCADE
;

DROP TABLE IF EXISTS Klient CASCADE
;

DROP TABLE IF EXISTS Kliendi_seisundi_liik CASCADE
;

DROP TABLE IF EXISTS Kaup CASCADE
;

DROP TABLE IF EXISTS Kauba_seisundi_liik CASCADE
;

DROP TABLE IF EXISTS Kauba_kategooria CASCADE
;

DROP TABLE IF EXISTS Isik CASCADE
;

DROP TABLE IF EXISTS Amet CASCADE
;

/* Drop Functions */

DROP FUNCTION IF EXISTS Eemalda_loplikult_muugist(VARCHAR)
;

DROP FUNCTION IF EXISTS Eemalda_ajutiselt_muugist(VARCHAR)
;

DROP FUNCTION IF EXISTS Sea_tagasi_muuki(VARCHAR)
;

/* Drop Domains */

DROP DOMAIN IF EXISTS d_klassifikaatori_nimetus RESTRICT
;

DROP DOMAIN IF EXISTS d_nimi RESTRICT
;

DROP DOMAIN IF EXISTS d_viide_klassifikaatorile RESTRICT
;

/* Create Domains */

CREATE DOMAIN d_klassifikaatori_nimetus VARCHAR(50)
NOT NULL CONSTRAINT d_nimi_check
CHECK (VALUE !~ '^[[:space:]]*$')
;

CREATE DOMAIN d_nimi VARCHAR(60) NOT NULL CONSTRAINT
d_klassifikaatori_nimetus_check CHECK
(VALUE ~* '([[:alpha:]]|[[:space:]]|-)+$')
;

CREATE DOMAIN d_viide_klassifikaatorile
SMALLINT NOT NULL DEFAULT 1
;


/* Create Tables */

CREATE TABLE Tootaja_seisundi_liik
(
	tootaja_seisundi_liik_kood smallint NOT NULL,
	nimetus d_klassifikaatori_nimetus,
	CONSTRAINT pk_tootaja_seisundi_liik PRIMARY KEY (tootaja_seisundi_liik_kood),
	CONSTRAINT ak_tootaja_seisundi_liik_nimetus UNIQUE (nimetus),
)
;

CREATE TABLE Osapoole_seisundi_liik
(
	osapoole_seisundi_liik_kood smallint NOT NULL,
	nimetus d_klassifikaatori_nimetus,
	CONSTRAINT pk_osapoole_seisundi_liik PRIMARY KEY (osapoole_seisundi_liik_kood),
	CONSTRAINT ak_osapoole_seisundi_liik_nimetus UNIQUE (nimetus),
)
;

CREATE TABLE Kliendi_seisundi_liik
(
	kliendi_seisundi_liik_kood smallint NOT NULL,
	nimetus d_klassifikaatori_nimetus,
	CONSTRAINT pk_kliendi_seisundi_liik PRIMARY KEY (kliendi_seisundi_liik_kood),
	CONSTRAINT ak_kliendi_seisundi_liik_nimetus UNIQUE (nimetus),
)
;

CREATE TABLE Kauba_seisundi_liik
(
	kauba_seisundi_liik_kood smallint NOT NULL,
	nimetus d_klassifikaatori_nimetus,
	CONSTRAINT pk_kauba_seisundi_liik PRIMARY KEY (kauba_seisundi_liik_kood),
	CONSTRAINT ak_kauba_seisundi_liik_nimetus UNIQUE (nimetus),
)
;


CREATE TABLE Kauba_kategooria
(
	kauba_kategooria_kood smallint NOT NULL,
	nimetus d_klassifikaatori_nimetus,
	CONSTRAINT pk_kauba_kategooria PRIMARY KEY (kauba_kategooria_kood),
	CONSTRAINT ak_kauba_kategooria_nimetus UNIQUE (nimetus),
)
;

CREATE TABLE Amet
(
	amet_kood smallint NOT NULL,
	nimetus d_klassifikaatori_nimetus,
	CONSTRAINT pk_amet PRIMARY KEY (amet_kood),
	CONSTRAINT ak_amet_nimetus UNIQUE (nimetus),
)
;

CREATE TABLE Osapool
(
	osapool_id serial NOT NULL,
	elektronpost varchar(255)	 NOT NULL,
	osapoole_seisundi_liik_kood d_viide_klassifikaatorile,
	aadress varchar(254)	 NOT NULL,
	telefon varchar(15)	 NOT NULL,
	CONSTRAINT pk_osapool PRIMARY KEY (osapool_id),
	CONSTRAINT ak_osapool_elektronpost UNIQUE (elektronpost),
	CONSTRAINT c_osapool_elektronpost_sisaldab_marki CHECK (elektronpost ~* '.*@.*'),
	CONSTRAINT c_osapool_aadress_lubatud_tahed CHECK (aadress ~* '([[:alnum:]]|-| )+$'),
	CONSTRAINT c_osapool_telefon_lubatud_tahed CHECK (telefon ~* '^(\+)?([[:digit:]])+$'),
	CONSTRAINT fk_osapool_osapoole_seisundi_liik FOREIGN KEY (osapoole_seisundi_liik_kood) REFERENCES Osapoole_seisundi_liik (osapoole_seisundi_liik_kood) ON DELETE No Action ON UPDATE Cascade
)
;

CREATE TABLE Isik
(
	isik_id integer NOT NULL,
	kasutajanimi varchar(60)	 NOT NULL,
	parool varchar(60)	 NOT NULL,
	eesnimi d_nimi,
	perenimi d_nimi,
	CONSTRAINT pk_isik PRIMARY KEY (isik_id),
	CONSTRAINT ak_isik_kasutajanimi UNIQUE (kasutajanimi),
	CONSTRAINT c_isik_kasutajanimi_pikkus CHECK (char_length(kasutajanimi) >= 4),
	CONSTRAINT c_isik_kasutajanimi_pole_tuhi CHECK (kasutajanimi!~'^[[:space:]]*$'),
	CONSTRAINT fk_isik_osapool FOREIGN KEY (isik_id) REFERENCES Osapool (osapool_id) ON DELETE Cascade ON UPDATE No Action
)
;


CREATE TABLE Tootaja
(
	tootaja_id integer NOT NULL,
	tootaja_seisundi_liik_kood d_viide_klassifikaatorile,
	amet_kood smallint NOT NULL,
	CONSTRAINT pk_tootaja PRIMARY KEY (tootaja_id),
	CONSTRAINT fk_tootaja_amet FOREIGN KEY (amet_kood) REFERENCES Amet (amet_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_tootaja_isik FOREIGN KEY (tootaja_id) REFERENCES Isik (isik_id) ON DELETE Cascade ON UPDATE No Action,
	CONSTRAINT fk_tootaja_tootaja_seisundi_liik FOREIGN KEY (tootaja_seisundi_liik_kood) REFERENCES Tootaja_seisundi_liik (tootaja_seisundi_liik_kood) ON DELETE No Action ON UPDATE Cascade
)
;

CREATE TABLE Klient
(
	klient_id integer NOT NULL,
	kliendi_seisundi_liik_kood d_viide_klassifikaatorile,
	CONSTRAINT pk_klient PRIMARY KEY (klient_id),
	CONSTRAINT fk_klient_isik FOREIGN KEY (klient_id) REFERENCES Isik (isik_id) ON DELETE Cascade ON UPDATE No Action,
	CONSTRAINT fk_klient_kliendi_seisundi_liik FOREIGN KEY (kliendi_seisundi_liik_kood) REFERENCES Kliendi_seisundi_liik (kliendi_seisundi_liik_kood) ON DELETE No Action ON UPDATE Cascade
)
;

CREATE TABLE Organisatsioon
(
	organisatsioon_id integer NOT NULL,
	registrikood char(8)	 NOT NULL,
	nimi varchar(50)	 NOT NULL,
	CONSTRAINT pk_organisatsioon PRIMARY KEY (organisatsioon_id),
	CONSTRAINT ak_organisatsioon_registrikood UNIQUE (registrikood),
	CONSTRAINT c_organisatsioon_registrikood_lubatud_tahed CHECK (registrikood ~ '[[:digit:]]{8}'),
	CONSTRAINT c_organisatsioon_nimi_pole_tuhi CHECK (nimi!~'^[[:space:]]*$'),
	CONSTRAINT FK_Organisatsioon_Osapool FOREIGN KEY (organisatsioon_id) REFERENCES Osapool (osapool_id) ON DELETE Cascade ON UPDATE No Action
)
;

CREATE TABLE Tarnija
(
	tarnija_id integer NOT NULL,
	CONSTRAINT pk_tarnija PRIMARY KEY (tarnija_id),
	CONSTRAINT fk_tarnija_organisatsioon FOREIGN KEY (tarnija_id) REFERENCES Organisatsioon (organisatsioon_id) ON DELETE Cascade ON UPDATE No Action
)
;

CREATE TABLE Kaup
(
	kauba_kood varchar(30)	 NOT NULL,
	nimetus varchar(100)	 NOT NULL,
	kauba_seisundi_liik_kood d_viide_klassifikaatorile,
	kauba_kategooria_kood smallint NOT NULL,
	tootaja_id integer NOT NULL,
	tarnija_id integer NOT NULL,
	hind decimal(10,2) NOT NULL,
	kirjeldus text NULL,
	CONSTRAINT pk_kaup PRIMARY KEY (kauba_kood),
	CONSTRAINT ak_kaup_nimetus UNIQUE (nimetus),
	CONSTRAINT c_kaup_hind_positiivne CHECK (hind > 0),
	CONSTRAINT c_kaup_kauba_kood_lubatud_tahed CHECK (kauba_kood ~* '([[:alnum:]])+$'),
	CONSTRAINT c_kaup_kirjeldus_pole_tuhi CHECK (kirjeldus!~'^[[:space:]]*$'),
	CONSTRAINT c_kaup_nimetus_pole_tuhi CHECK (nimetus!~'^[[:space:]]*$'),
	CONSTRAINT fk_kaup_kauba_kategooria FOREIGN KEY (kauba_kategooria_kood) REFERENCES Kauba_kategooria (kauba_kategooria_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_kaup_kauba_seisundi_liik FOREIGN KEY (kauba_seisundi_liik_kood) REFERENCES Kauba_seisundi_liik (kauba_seisundi_liik_kood) ON DELETE No Action ON UPDATE Cascade,
	CONSTRAINT fk_kaup_tarnija FOREIGN KEY (tarnija_id) REFERENCES Tarnija (tarnija_id) ON DELETE No Action ON UPDATE No Action,
	CONSTRAINT fk_kaup_tootaja FOREIGN KEY (tootaja_id) REFERENCES Tootaja (tootaja_id) ON DELETE No Action ON UPDATE No Action
)
;

/* Create Views */
CREATE OR REPLACE VIEW Detailaruanne WITH (security_barrier) AS
SELECT Kaup.kauba_kood, Kaup.nimetus, Kauba_seisundi_liik.nimetus AS kauba_seisundi_liik, Kaup.hind, Kauba_kategooria.nimetus AS kauba_kategooria,
Organisatsioon.nimi AS tarnija, Kaup.kirjeldus, Isik.eesnimi || ' ' || Isik.perenimi AS viimane_muutja
FROM ((Organisatsioon INNER JOIN (Tarnija INNER JOIN (Kauba_seisundi_liik INNER JOIN (Kauba_kategooria INNER JOIN
Kaup USING (kauba_kategooria_kood)) USING (kauba_seisundi_liik_kood)) USING (tarnija_id)) ON
Organisatsioon.organisatsioon_id = Tarnija.tarnija_id) INNER JOIN Tootaja USING (tootaja_id)) INNER JOIN Isik ON Tootaja.tootaja_id=Isik.isik_id
;

COMMENT ON VIEW Detailaruanne IS
'Vaade leiab andmed kõigi kaupade, nende tarnijate ja neid viimati muutnud töötajate kohta. Vaade on kasutuses detailaruande kuvamisel.'
;

CREATE OR REPLACE VIEW Loplikult_muugist_eemaldamine WITH (security_barrier) AS
SELECT Kaup.kauba_kood, Kaup.nimetus, Kauba_seisundi_liik.nimetus AS kauba_seisundi_liik, Kaup.hind, Kauba_kategooria.nimetus AS kauba_kategooria,
Organisatsioon.nimi AS tarnija, Kaup.kirjeldus
FROM ((Organisatsioon INNER JOIN (Tarnija INNER JOIN (Kauba_seisundi_liik INNER JOIN (Kauba_kategooria INNER JOIN
Kaup USING (kauba_kategooria_kood)) USING (kauba_seisundi_liik_kood)) USING (tarnija_id)) ON
Organisatsioon.organisatsioon_id = Tarnija.tarnija_id))
WHERE Kauba_seisundi_liik.kauba_seisundi_liik_kood != 3
;

COMMENT ON VIEW Loplikult_muugist_eemaldamine IS
'Vaade leiab andmed kaupade, mis ei ole seisundi "loplikult muugist eemaldatud" ja nende tarnijate kohta. Vaade on kasutuses kaupade loplikult muugist eemaldamise vaates.'
;

CREATE OR REPLACE VIEW Keskmine_hind WITH (security_barrier) AS
SELECT Avg(hind) AS keskmine_hind
FROM Kaup
;

COMMENT ON VIEW Keskmine_hind IS
'Vaade leiab kõigi kaupade hindade keskmise. Vaade on kasutuses detailaruandes koondandmete kuvamisel.'
;

CREATE OR REPLACE VIEW Kauba_detailvaade WITH (security_barrier) AS
SELECT Kaup.kauba_kood, Kaup.nimetus, Kauba_seisundi_liik.nimetus AS kauba_seisundi_liik, Kaup.hind,
Kauba_kategooria.nimetus AS kauba_kategooria, Organisatsioon.nimi AS tarnija, Organisatsioon.registrikood AS tarnija_registrikood, Osapoole_seisundi_liik.nimetus AS suhe_epoega,
Osapool.elektronpost AS tarnija_elektronpost, Osapool.telefon AS tarnija_telefon, Osapool.aadress AS tarnija_aadress, Kaup.kirjeldus,
(Isik.eesnimi || ' ' || Isik.perenimi) AS viimane_muutja, Isik.kasutajanimi AS muutja_kasutajanimi, Amet.nimetus AS muutja_amet, Tootaja_seisundi_liik.nimetus AS muutja_seisund
FROM (((((((((Kaup INNER JOIN Kauba_seisundi_liik USING (kauba_seisundi_liik_kood)) INNER JOIN Kauba_kategooria USING (kauba_kategooria_kood))
INNER JOIN Tarnija USING (tarnija_id)) INNER JOIN Organisatsioon ON Tarnija.tarnija_id=Organisatsioon.organisatsioon_id)
INNER JOIN Osapool ON Organisatsioon.organisatsioon_id=Osapool.osapool_id) INNER JOIN Osapoole_seisundi_liik USING (osapoole_seisundi_liik_kood))
INNER JOIN Tootaja USING (tootaja_id)) INNER JOIN Amet USING (amet_kood)) INNER JOIN Tootaja_seisundi_liik USING (tootaja_seisundi_liik_kood))
INNER JOIN Isik ON Tootaja.tootaja_id=Isik.isik_id;
;

COMMENT ON VIEW Kauba_detailvaade IS
'Vaade leiab andmed kõigi kaupade, nende tarnijate ja neid viimati muutnud töötajate kohta. Leiab täpsemad andmed kui Detailaruanne. Vaade on kasutuses kauba lähemalt vaatamisel.'
;

/* Create Functions */

CREATE OR REPLACE FUNCTION Eemalda_loplikult_muugist(kauba_kood VARCHAR)
RETURNS VOID LANGUAGE sql VOLATILE STRICT SECURITY DEFINER
AS
$$
    UPDATE Kaup
    SET kauba_seisundi_liik_kood=3
    WHERE kauba_kood=$1 AND kauba_seisundi_liik_kood!=3;
$$
SET search_path = public, pg_temp
;

COMMENT ON FUNCTION Eemalda_loplikult_muugist(VARCHAR) IS 
'Andmebaasioperatsioon OP5. Seab kauba, mille kood antakse argumendina ja mis ei ole seisundis "lõplikult müügist eemaldatud", seisundisse "lõplikult müügist eemaldatud".'
;

CREATE OR REPLACE FUNCTION Eemalda_ajutiselt_muugist(kauba_kood VARCHAR)
RETURNS VOID LANGUAGE sql VOLATILE STRICT SECURITY DEFINER
AS
$$
    UPDATE Kaup
    SET kauba_seisundi_liik_kood=2
    WHERE kauba_kood=$1 AND kauba_seisundi_liik_kood=1;
$$
SET search_path = public, pg_temp
;

COMMENT ON FUNCTION Eemalda_ajutiselt_muugist(VARCHAR) IS 
'Andmebaasioperatsioon OP4. Seab kauba, mille kood antakse argumendina ja mis on seisundis "müügis", seisundisse "ajutiselt müügist eemaldatud".'
;

CREATE OR REPLACE FUNCTION Sea_tagasi_muuki(kauba_kood VARCHAR)
RETURNS VOID LANGUAGE sql VOLATILE STRICT SECURITY DEFINER
AS
$$
    UPDATE Kaup
    SET kauba_seisundi_liik_kood=1
    WHERE kauba_kood=$1 AND kauba_seisundi_liik_kood=2;
$$
SET search_path = public, pg_temp
;

COMMENT ON FUNCTION Sea_tagasi_muuki(VARCHAR) IS 
'Andmebaasioperatsioon OP3. Seab kauba, mille kood antakse argumendina ja mis on seisundis "ajutiselt müügist eemaldatud", seisundisse "müügis".'
;

/* Create Triggers */

CREATE OR REPLACE FUNCTION f_keelatud_seisundimuudatus() 
RETURNS trigger AS 
$$
BEGIN 
    RAISE EXCEPTION 'Keelatud seisundimuudatus';
	return new;
END;
$$
LANGUAGE plpgsql IMMUTABLE STRICT SECURITY DEFINER
;

COMMENT ON FUNCTION f_keelatud_seisundimuudatus() IS
'Tekitab erindi veateatega keelatud seisundimuudatuse kohta'
;

CREATE TRIGGER kaup_u BEFORE UPDATE OF
kauba_seisundi_liik_kood ON Kaup
FOR EACH ROW
WHEN (OLD.kauba_seisundi_liik_kood!=NEW.kauba_seisundi_liik_kood AND OLD.kauba_seisundi_liik_kood=3)
EXECUTE PROCEDURE f_keelatud_seisundimuudatus()
;

COMMENT ON TRIGGER kaup_u ON Kaup IS
'Kauba andmeid muutes ei saa muuta kauba, mis on seisundi lõplikult müügist eemaldatud, seisundit. Muudatus, mis jätab kauba seisundi samaks on alati lubatud.'
;

CREATE OR REPLACE FUNCTION f_kustutamine_keelatud() 
RETURNS trigger AS 
$$
BEGIN 
    RAISE EXCEPTION 'Kauba kustutamine on keelatud';
	return new;
END;
$$
LANGUAGE plpgsql IMMUTABLE STRICT SECURITY DEFINER
;

COMMENT ON FUNCTION f_kustutamine_keelatud() IS
'Tekitab erindi veateatega selle kohta, et kustutamine on keelatud.'
;

CREATE TRIGGER kaup_d BEFORE DELETE OR TRUNCATE ON Kaup
FOR EACH STATEMENT
EXECUTE PROCEDURE f_kustutamine_keelatud()
;

COMMENT ON TRIGGER kaup_d ON Kaup IS
'Kauba andmeid ei ole lubatud kustutada.'
;

CREATE OR REPLACE FUNCTION f_alguses_kaup_muugis() 
RETURNS trigger AS 
$$
BEGIN 
    RAISE EXCEPTION 'Kauba peab looma seisundis müügis';
	return new;
END;
$$
LANGUAGE plpgsql IMMUTABLE STRICT SECURITY DEFINER
;

COMMENT ON FUNCTION f_alguses_kaup_muugis() IS
'Tekitab erindi veateatega selle kohta, et loodud kauba seisund peab olema "müügis".'
;

CREATE TRIGGER kaup_i BEFORE INSERT ON Kaup
FOR EACH ROW
WHEN (NEW.kauba_seisundi_liik_kood!=1)
EXECUTE PROCEDURE f_alguses_kaup_muugis()
;

COMMENT ON TRIGGER kaup_i ON Kaup IS
'Uue kauba saab sisestada ainult seisundis "müügis"'
;

/* Create Indexes */

CREATE INDEX ixfk_tootaja_amet ON Tootaja (amet_kood ASC)
;

CREATE INDEX ixfk_tootaja_tootaja_seisundi_liik ON Tootaja (tootaja_seisundi_liik_kood ASC)
;

CREATE INDEX ixfk_osapool_osapoole_seisundi_liik ON Osapool (osapoole_seisundi_liik_kood ASC)
;

CREATE INDEX ixfk_nimi ON Organisatsioon (nimi ASC)
;

CREATE INDEX ixfk_klient_kliendi_seisundi_liik ON Klient (kliendi_seisundi_liik_kood ASC)
;

CREATE INDEX ixfk_kaup_kauba_kategooria ON Kaup (kauba_kategooria_kood ASC)
;

CREATE INDEX ixfk_kaup_kauba_seisundi_liik ON Kaup (kauba_seisundi_liik_kood ASC)
;

CREATE INDEX ixfk_kaup_tarnija ON Kaup (tarnija_id ASC)
;

CREATE INDEX ixfk_kaup_tootaja ON Kaup (tootaja_id ASC)
;


/* Insert */
INSERT INTO amet 
(amet_kood, nimetus) VALUES 
(2, 'kaubatundja')
;

INSERT INTO amet 
(amet_kood, nimetus) VALUES 
(1, 'juhataja')
;

/* ------------------ */

INSERT INTO tootaja_seisundi_liik
(tootaja_seisundi_liik_kood, nimetus) VALUES 
(1, 'töötab')
;

INSERT INTO tootaja_seisundi_liik
(tootaja_seisundi_liik_kood, nimetus) VALUES 
(2, 'puhkusel')
;


INSERT INTO tootaja_seisundi_liik
(tootaja_seisundi_liik_kood, nimetus) VALUES 
(3, 'ajutiselt eemal')
;


INSERT INTO tootaja_seisundi_liik
(tootaja_seisundi_liik_kood, nimetus) VALUES 
(4, 'töösuhe lopetatud')
;

/* -------------- */

INSERT INTO kauba_seisundi_liik
(kauba_seisundi_liik_kood, nimetus) VALUES 
(1, 'müügis')
;

INSERT INTO kauba_seisundi_liik
(kauba_seisundi_liik_kood, nimetus) VALUES 
(2, 'ajutiselt müügist eemaldatud')
;

INSERT INTO kauba_seisundi_liik
(kauba_seisundi_liik_kood, nimetus) VALUES 
(3, 'loplikult müügist eemaldatud')
;

/* ------------------ */

INSERT INTO osapoole_seisundi_liik
(osapoole_seisundi_liik_kood, nimetus) VALUES 
(1, 'aktiivne')
;

INSERT INTO osapoole_seisundi_liik
(osapoole_seisundi_liik_kood, nimetus) VALUES 
(2, 'mitteaktiivne')
;

/* ------------------ */

INSERT INTO kliendi_seisundi_liik
(kliendi_seisundi_liik_kood, nimetus) VALUES 
(1, 'aktiivne')
;


INSERT INTO kliendi_seisundi_liik
(kliendi_seisundi_liik_kood, nimetus) VALUES 
(2, 'mitteaktiivne')
;

/* ------------------ */

INSERT INTO kauba_kategooria
(kauba_kategooria_kood, nimetus) VALUES
(1, 'toit')
;


INSERT INTO kauba_kategooria
(kauba_kategooria_kood, nimetus) VALUES
(2, 'elektroonika')
;

INSERT INTO kauba_kategooria
(kauba_kategooria_kood, nimetus) VALUES
(3, 'muud kaubad')
;

/* ------------------ */

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('juhan@usd.com', 1, 'Uus 1-33', '+55697945')
;

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('timo@usd.com', 2, 'Aia 1-33', '55697946')
;

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('mati@usa.com', 1, 'Maa 1-33', '+55697947')
;

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('juha@usb.com', 2, 'Kuu 2-33', '+55697948')
;

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('jaanus@usd.com', 1, 'Pikk 1-43', '+55697949')
;

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('jari@usc.com', 2, 'Taara 2-53', '+55697910')
;

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('jauno@use.com', 1, 'Lai 4-63', '+55697911')
;

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('jaak@usf.com', 2, 'Tuvi 5-93', '+55697912')
;


INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('janek@usg.com', 1, 'Padu 10-13', '+55697913')
;

INSERT INTO Osapool
(elektronpost, osapoole_seisundi_liik_kood, aadress, telefon) VALUES
('jekaterina@ush.com', 1, 'Ao 21-53', '+55697945')
;

/* ------------------ */

INSERT INTO Organisatsioon
(organisatsioon_id, registrikood, nimi) VALUES
(1, '12345678', 'Alpha')
;

INSERT INTO Organisatsioon
(organisatsioon_id, registrikood, nimi) VALUES
(2, '12345679', 'Beta')
;

INSERT INTO Organisatsioon
(organisatsioon_id, registrikood, nimi) VALUES
(3, '22345679', 'Gamma')
;

/* ------------------ */

INSERT INTO Isik
(isik_id, kasutajanimi, parool, eesnimi, perenimi) VALUES
(4, 'juhan1', '123', 'Juhan', 'Hani')
;

INSERT INTO Isik
(isik_id, kasutajanimi, parool, eesnimi, perenimi) VALUES
(5, 'juha1', '123', 'Juha', 'Uha')
;

INSERT INTO Isik
(isik_id, kasutajanimi, parool, eesnimi, perenimi) VALUES
(6, 'mati1', '123', 'Mati', 'Kati')
;

INSERT INTO Isik
(isik_id, kasutajanimi, parool, eesnimi, perenimi) VALUES
(7, 'jari1', '123', 'Jari', 'Nari')
;


INSERT INTO Isik
(isik_id, kasutajanimi, parool, eesnimi, perenimi) VALUES
(8, 'jaak1', '123', 'Jaak', 'Praak')
;

INSERT INTO Isik
(isik_id, kasutajanimi, parool, eesnimi, perenimi) VALUES
(9, 'janek1', '123', 'Janek', 'Panek')
;

INSERT INTO Isik
(isik_id, kasutajanimi, parool, eesnimi, perenimi) VALUES
(10, 'jekaterina1', '123', 'Jekaterina', 'Kriina')
;

/* ------------------ */

INSERT INTO Tarnija
(tarnija_id) VALUES
(1)
;


INSERT INTO Tarnija
(tarnija_id) VALUES
(2)
;


INSERT INTO Tarnija
(tarnija_id) VALUES
(3)
;

/* ------------------ */

INSERT INTO Klient
(Klient_id, kliendi_seisundi_liik_kood) VALUES
(4, 1)
;

INSERT INTO Klient
(Klient_id, kliendi_seisundi_liik_kood) VALUES
(5, 2)
;

INSERT INTO Klient
(Klient_id, kliendi_seisundi_liik_kood) VALUES
(6, 1)
;

/* ------------------ */

INSERT INTO Tootaja
(tootaja_id, tootaja_seisundi_liik_kood, amet_kood) VALUES
(7, 1, 1)
;

INSERT INTO Tootaja
(tootaja_id, tootaja_seisundi_liik_kood, amet_kood) VALUES
(8, 2, 1)
;

INSERT INTO Tootaja
(tootaja_id, tootaja_seisundi_liik_kood, amet_kood) VALUES
(9, 3, 2)
;

INSERT INTO Tootaja
(tootaja_id, tootaja_seisundi_liik_kood, amet_kood) VALUES
(10, 4, 2)
;

/* ------------------ */

INSERT INTO Kaup
(kauba_kood, nimetus, kauba_seisundi_liik_kood, kauba_kategooria_kood, tootaja_id, tarnija_id, hind, kirjeldus) VALUES
('abc3422', 'Minu Leib', 1, 1, 7, 1, 10.00, 'söödav')
;

INSERT INTO Kaup
(kauba_kood, nimetus, kauba_seisundi_liik_kood, kauba_kategooria_kood, tootaja_id, tarnija_id, hind, kirjeldus) VALUES
('jasdöos', 'Elektrooniline Kapsas', 2, 2, 8, 2, 10.345, 'Tehnoloogiline saavutus')
;

INSERT INTO Kaup
(kauba_kood, nimetus, kauba_seisundi_liik_kood, kauba_kategooria_kood, tootaja_id, tarnija_id, hind, kirjeldus) VALUES
('jiwejt', 'Kasutatud Kulm', 3, 3, 9, 3, 134.345, 'Karvane')
;

/* Select All From Views */
SELECT * FROM Detailaruanne
;

SELECT * FROM Loplikult_muugist_eemaldamise_vaade
;

SELECT * FROM Keskmine_hind
;

SELECT * FROM Kauba_detailvaade
;

/* Run Functions */

SELECT Eemalda_loplikult_muugist('jasdöos')
;

SELECT Eemalda_ajutiselt_muugist('abc3422')
;

SELECT Sea_tagasi_muuki('fsdakjfaöskl4545445')
;

/* Authentification */



/* Statistics */
VACUUM ANALYZE;

/* Execution plan */
SELECT Kaup.kauba_kood, Kaup.nimetus, Kauba_seisundi_liik.nimetus AS kauba_seisundi_liik, Kaup.hind, Kauba_kategooria.nimetus AS kauba_kategooria,
Organisatsioon.nimi AS tarnija, Kaup.kirjeldus, Isik.eesnimi || ' ' || Isik.perenimi AS viimane_muutja
FROM ((Organisatsioon INNER JOIN (Tarnija INNER JOIN (Kauba_seisundi_liik INNER JOIN (Kauba_kategooria INNER JOIN
Kaup USING (kauba_kategooria_kood)) USING (kauba_seisundi_liik_kood)) USING (tarnija_id)) ON
Organisatsioon.organisatsioon_id = Tarnija.tarnija_id) INNER JOIN Tootaja USING (tootaja_id)) INNER JOIN Isik ON Tootaja.tootaja_id=Isik.isik_id
;

/* TULEMUS
--------------------

QUERY PLAN
Hash Join  (cost=6.51..7.95 rows=5 width=88)
  Hash Cond: (kaup.kauba_kategooria_kood = kauba_kategooria.kauba_kategooria_kood)
  ->  Hash Join  (cost=5.45..6.79 rows=5 width=80)
        Hash Cond: ((kaup.kauba_seisundi_liik_kood)::smallint = kauba_seisundi_liik.kauba_seisundi_liik_kood)
        ->  Hash Join  (cost=4.38..5.65 rows=5 width=59)
              Hash Cond: (kaup.tarnija_id = tarnija.tarnija_id)
              ->  Hash Join  (cost=2.20..3.41 rows=5 width=58)
                    Hash Cond: (tootaja.tootaja_id = kaup.tootaja_id)
                    ->  Hash Join  (cost=1.09..2.23 rows=4 width=19)
                          Hash Cond: (isik.isik_id = tootaja.tootaja_id)
                          ->  Seq Scan on isik  (cost=0.00..1.07 rows=7 width=15)
                          ->  Hash  (cost=1.04..1.04 rows=4 width=4)
                                ->  Seq Scan on tootaja  (cost=0.00..1.04 rows=4 width=4)
                    ->  Hash  (cost=1.05..1.05 rows=5 width=51)
                          ->  Seq Scan on kaup  (cost=0.00..1.05 rows=5 width=51)
              ->  Hash  (cost=2.14..2.14 rows=3 width=13)
                    ->  Hash Join  (cost=1.07..2.14 rows=3 width=13)
                          Hash Cond: (organisatsioon.organisatsioon_id = tarnija.tarnija_id)
                          ->  Seq Scan on organisatsioon  (cost=0.00..1.03 rows=3 width=9)
                          ->  Hash  (cost=1.03..1.03 rows=3 width=4)
                                ->  Seq Scan on tarnija  (cost=0.00..1.03 rows=3 width=4)
        ->  Hash  (cost=1.03..1.03 rows=3 width=25)
              ->  Seq Scan on kauba_seisundi_liik  (cost=0.00..1.03 rows=3 width=25)
  ->  Hash  (cost=1.03..1.03 rows=3 width=12)
        ->  Seq Scan on kauba_kategooria  (cost=0.00..1.03 rows=3 width=12)
*/